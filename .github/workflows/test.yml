# Terraform Provider testing workflow
name: Tests

on:
  pull_request:
    paths-ignore:
      - README.md
  push:
    branches: [main]
    paths-ignore:
      - README.md

permissions:
  contents: read

jobs:

  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest

    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          mod=$(go env GOMOD)
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "sum=${mod/%.mod/.sum}"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: test-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.sum) }}
          restore-keys: |
            test-${{ runner.os }}-go-

      - run: go mod download
      - run: go build -v .

      - name: Run linters
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: --out-format=colored-line-number
          skip-cache: true

  # Ensure generated files are up-to-date.
  generate:
    name: Generate
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          mod=$(go env GOMOD)
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "sum=${mod/%.mod/.sum}"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: test-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.sum) }}
          restore-keys: |
            test-${{ runner.os }}-go-

      - run: go mod download
      - name: go generate
        run: |
          go generate ./...
          # check if go generate modified or added any files
          if ! git diff --compact-summary --exit-code; then
            echo
            echo "go generate caused changes to the repository. Run 'go generate ./...' command and commit."
            exit 1
          fi

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Terraform Provider Acceptance Tests
    needs: build
    runs-on: ubuntu-latest

    timeout-minutes: 15

    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        terraform:
          - '1.4.*'
          - '1.5.*'
          - '1.6.*'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          mod=$(go env GOMOD)
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "sum=${mod/%.mod/.sum}"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: test-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.sum) }}
          restore-keys: |
            test-${{ runner.os }}-go-

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - run: go mod download
      - run: go test -v -cover ./internal/provider/
        env:
          TF_ACC: '1'
          UKC_TOKEN: ${{ secrets.UKC_TOKEN }}
        timeout-minutes: 10
