// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_quotas

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func QuotasDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"quotas": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"hard": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"instances": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of instances",
											MarkdownDescription: "Number of instances",
										},
										"live_instances": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of instances that are not in the `stopped` state",
											MarkdownDescription: "Number of instances that are not in the `stopped` state",
										},
										"live_memory_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Amount of memory assigned to instances that are not in the `stopped`\nstate in megabytes",
											MarkdownDescription: "Amount of memory assigned to instances that are not in the `stopped`\nstate in megabytes",
										},
										"service_groups": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of services",
											MarkdownDescription: "Number of services",
										},
										"services": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of published network ports over all existing services",
											MarkdownDescription: "Number of published network ports over all existing services",
										},
										"total_volume_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Total size of all volumes in megabytes",
											MarkdownDescription: "Total size of all volumes in megabytes",
										},
										"volumes": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of volumes",
											MarkdownDescription: "Number of volumes",
										},
									},
									CustomType: HardType{
										ObjectType: types.ObjectType{
											AttrTypes: HardValue{}.AttributeTypes(ctx),
										},
									},
									Computed:            true,
									Description:         "Configured quota limits",
									MarkdownDescription: "Configured quota limits",
								},
								"limits": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"max_autoscale_size": schema.Int64Attribute{
											Computed:            true,
											Description:         "Maximum size of an autoscale group",
											MarkdownDescription: "Maximum size of an autoscale group",
										},
										"max_memory_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Maximum amount of memory assigned to live instances in megabytes",
											MarkdownDescription: "Maximum amount of memory assigned to live instances in megabytes",
										},
										"max_volume_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Maximum size of a volume in megabytes",
											MarkdownDescription: "Maximum size of a volume in megabytes",
										},
										"min_autoscale_size": schema.Int64Attribute{
											Computed:            true,
											Description:         "Minimum size of an autoscale group",
											MarkdownDescription: "Minimum size of an autoscale group",
										},
										"min_memory_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Minimum amount of memory assigned to live instances in megabytes",
											MarkdownDescription: "Minimum amount of memory assigned to live instances in megabytes",
										},
										"min_volume_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Minimum size of a volume in megabytes",
											MarkdownDescription: "Minimum size of a volume in megabytes",
										},
									},
									CustomType: LimitsType{
										ObjectType: types.ObjectType{
											AttrTypes: LimitsValue{}.AttributeTypes(ctx),
										},
									},
									Computed:            true,
									Description:         "Additional limits",
									MarkdownDescription: "Additional limits",
								},
								"used": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"instances": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of instances",
											MarkdownDescription: "Number of instances",
										},
										"live_instances": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of instances that are not in the `stopped` state",
											MarkdownDescription: "Number of instances that are not in the `stopped` state",
										},
										"live_memory_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Amount of memory assigned to instances that are not in the `stopped`\nstate in megabytes",
											MarkdownDescription: "Amount of memory assigned to instances that are not in the `stopped`\nstate in megabytes",
										},
										"service_groups": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of services",
											MarkdownDescription: "Number of services",
										},
										"services": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of published network ports over all existing services",
											MarkdownDescription: "Number of published network ports over all existing services",
										},
										"total_volume_mb": schema.Int64Attribute{
											Computed:            true,
											Description:         "Total size of all volumes in megabytes",
											MarkdownDescription: "Total size of all volumes in megabytes",
										},
										"volumes": schema.Int64Attribute{
											Computed:            true,
											Description:         "Number of volumes",
											MarkdownDescription: "Number of volumes",
										},
									},
									CustomType: UsedType{
										ObjectType: types.ObjectType{
											AttrTypes: UsedValue{}.AttributeTypes(ctx),
										},
									},
									Computed:            true,
									Description:         "Used quota",
									MarkdownDescription: "Used quota",
								},
								"uuid": schema.StringAttribute{
									Computed:            true,
									Description:         "The UUID of the quota.",
									MarkdownDescription: "The UUID of the quota.",
								},
							},
							CustomType: QuotasType{
								ObjectType: types.ObjectType{
									AttrTypes: QuotasValue{}.AttributeTypes(ctx),
								},
							},
						},
						Computed:            true,
						Description:         "The quota(s) which were retrieved by the request.",
						MarkdownDescription: "The quota(s) which were retrieved by the request.",
					},
				},
				CustomType: DataType{
					ObjectType: types.ObjectType{
						AttrTypes: DataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"message": schema.StringAttribute{
				Computed:            true,
				Description:         "An optional message providing additional information about the response.",
				MarkdownDescription: "An optional message providing additional information about the response.",
			},
			"op_time_us": schema.Int64Attribute{
				Computed:            true,
				Description:         "The operation time in microseconds. This is the time it took to process\nthe request and generate the response.",
				MarkdownDescription: "The operation time in microseconds. This is the time it took to process\nthe request and generate the response.",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The status of the response.",
				MarkdownDescription: "The status of the response.",
			},
		},
	}
}

type QuotasModel struct {
	Data     DataValue    `tfsdk:"data"`
	Message  types.String `tfsdk:"message"`
	OpTimeUs types.Int64  `tfsdk:"op_time_us"`
	Status   types.String `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = DataType{}

type DataType struct {
	basetypes.ObjectType
}

func (t DataType) Equal(o attr.Type) bool {
	other, ok := o.(DataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DataType) String() string {
	return "DataType"
}

func (t DataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	quotasAttribute, ok := attributes["quotas"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`quotas is missing from object`)

		return nil, diags
	}

	quotasVal, ok := quotasAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`quotas expected to be basetypes.ListValue, was: %T`, quotasAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DataValue{
		Quotas: quotasVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewDataValueNull() DataValue {
	return DataValue{
		state: attr.ValueStateNull,
	}
}

func NewDataValueUnknown() DataValue {
	return DataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DataValue Attribute Value",
				"While creating a DataValue value, a missing attribute value was detected. "+
					"A DataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DataValue Attribute Type",
				"While creating a DataValue value, an invalid attribute value was detected. "+
					"A DataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DataValue Attribute Value",
				"While creating a DataValue value, an extra attribute value was detected. "+
					"A DataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	quotasAttribute, ok := attributes["quotas"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`quotas is missing from object`)

		return NewDataValueUnknown(), diags
	}

	quotasVal, ok := quotasAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`quotas expected to be basetypes.ListValue, was: %T`, quotasAttribute))
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	return DataValue{
		Quotas: quotasVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DataValue {
	object, diags := NewDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDataValueMust(DataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DataType) ValueType(ctx context.Context) attr.Value {
	return DataValue{}
}

var _ basetypes.ObjectValuable = DataValue{}

type DataValue struct {
	Quotas basetypes.ListValue `tfsdk:"quotas"`
	state  attr.ValueState
}

func (v DataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["quotas"] = basetypes.ListType{
		ElemType: QuotasValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Quotas.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["quotas"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DataValue) String() string {
	return "DataValue"
}

func (v DataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	quotas := types.ListValueMust(
		QuotasType{
			basetypes.ObjectType{
				AttrTypes: QuotasValue{}.AttributeTypes(ctx),
			},
		},
		v.Quotas.Elements(),
	)

	if v.Quotas.IsNull() {
		quotas = types.ListNull(
			QuotasType{
				basetypes.ObjectType{
					AttrTypes: QuotasValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Quotas.IsUnknown() {
		quotas = types.ListUnknown(
			QuotasType{
				basetypes.ObjectType{
					AttrTypes: QuotasValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"quotas": basetypes.ListType{
			ElemType: QuotasValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"quotas": quotas,
		})

	return objVal, diags
}

func (v DataValue) Equal(o attr.Value) bool {
	other, ok := o.(DataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Quotas.Equal(other.Quotas) {
		return false
	}

	return true
}

func (v DataValue) Type(ctx context.Context) attr.Type {
	return DataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"quotas": basetypes.ListType{
			ElemType: QuotasValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = QuotasType{}

type QuotasType struct {
	basetypes.ObjectType
}

func (t QuotasType) Equal(o attr.Type) bool {
	other, ok := o.(QuotasType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t QuotasType) String() string {
	return "QuotasType"
}

func (t QuotasType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	hardAttribute, ok := attributes["hard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hard is missing from object`)

		return nil, diags
	}

	hardVal, ok := hardAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hard expected to be basetypes.ObjectValue, was: %T`, hardAttribute))
	}

	limitsAttribute, ok := attributes["limits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limits is missing from object`)

		return nil, diags
	}

	limitsVal, ok := limitsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limits expected to be basetypes.ObjectValue, was: %T`, limitsAttribute))
	}

	usedAttribute, ok := attributes["used"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`used is missing from object`)

		return nil, diags
	}

	usedVal, ok := usedAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`used expected to be basetypes.ObjectValue, was: %T`, usedAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return QuotasValue{
		Hard:   hardVal,
		Limits: limitsVal,
		Used:   usedVal,
		Uuid:   uuidVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewQuotasValueNull() QuotasValue {
	return QuotasValue{
		state: attr.ValueStateNull,
	}
}

func NewQuotasValueUnknown() QuotasValue {
	return QuotasValue{
		state: attr.ValueStateUnknown,
	}
}

func NewQuotasValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (QuotasValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing QuotasValue Attribute Value",
				"While creating a QuotasValue value, a missing attribute value was detected. "+
					"A QuotasValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QuotasValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid QuotasValue Attribute Type",
				"While creating a QuotasValue value, an invalid attribute value was detected. "+
					"A QuotasValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QuotasValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("QuotasValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra QuotasValue Attribute Value",
				"While creating a QuotasValue value, an extra attribute value was detected. "+
					"A QuotasValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra QuotasValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewQuotasValueUnknown(), diags
	}

	hardAttribute, ok := attributes["hard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hard is missing from object`)

		return NewQuotasValueUnknown(), diags
	}

	hardVal, ok := hardAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hard expected to be basetypes.ObjectValue, was: %T`, hardAttribute))
	}

	limitsAttribute, ok := attributes["limits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`limits is missing from object`)

		return NewQuotasValueUnknown(), diags
	}

	limitsVal, ok := limitsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`limits expected to be basetypes.ObjectValue, was: %T`, limitsAttribute))
	}

	usedAttribute, ok := attributes["used"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`used is missing from object`)

		return NewQuotasValueUnknown(), diags
	}

	usedVal, ok := usedAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`used expected to be basetypes.ObjectValue, was: %T`, usedAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewQuotasValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewQuotasValueUnknown(), diags
	}

	return QuotasValue{
		Hard:   hardVal,
		Limits: limitsVal,
		Used:   usedVal,
		Uuid:   uuidVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewQuotasValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) QuotasValue {
	object, diags := NewQuotasValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewQuotasValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t QuotasType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewQuotasValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewQuotasValueUnknown(), nil
	}

	if in.IsNull() {
		return NewQuotasValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewQuotasValueMust(QuotasValue{}.AttributeTypes(ctx), attributes), nil
}

func (t QuotasType) ValueType(ctx context.Context) attr.Value {
	return QuotasValue{}
}

var _ basetypes.ObjectValuable = QuotasValue{}

type QuotasValue struct {
	Hard   basetypes.ObjectValue `tfsdk:"hard"`
	Limits basetypes.ObjectValue `tfsdk:"limits"`
	Used   basetypes.ObjectValue `tfsdk:"used"`
	Uuid   basetypes.StringValue `tfsdk:"uuid"`
	state  attr.ValueState
}

func (v QuotasValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["hard"] = basetypes.ObjectType{
		AttrTypes: HardValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["limits"] = basetypes.ObjectType{
		AttrTypes: LimitsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["used"] = basetypes.ObjectType{
		AttrTypes: UsedValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Hard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hard"] = val

		val, err = v.Limits.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["limits"] = val

		val, err = v.Used.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["used"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v QuotasValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v QuotasValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v QuotasValue) String() string {
	return "QuotasValue"
}

func (v QuotasValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var hard basetypes.ObjectValue

	if v.Hard.IsNull() {
		hard = types.ObjectNull(
			HardValue{}.AttributeTypes(ctx),
		)
	}

	if v.Hard.IsUnknown() {
		hard = types.ObjectUnknown(
			HardValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Hard.IsNull() && !v.Hard.IsUnknown() {
		hard = types.ObjectValueMust(
			HardValue{}.AttributeTypes(ctx),
			v.Hard.Attributes(),
		)
	}

	var limits basetypes.ObjectValue

	if v.Limits.IsNull() {
		limits = types.ObjectNull(
			LimitsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Limits.IsUnknown() {
		limits = types.ObjectUnknown(
			LimitsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Limits.IsNull() && !v.Limits.IsUnknown() {
		limits = types.ObjectValueMust(
			LimitsValue{}.AttributeTypes(ctx),
			v.Limits.Attributes(),
		)
	}

	var used basetypes.ObjectValue

	if v.Used.IsNull() {
		used = types.ObjectNull(
			UsedValue{}.AttributeTypes(ctx),
		)
	}

	if v.Used.IsUnknown() {
		used = types.ObjectUnknown(
			UsedValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Used.IsNull() && !v.Used.IsUnknown() {
		used = types.ObjectValueMust(
			UsedValue{}.AttributeTypes(ctx),
			v.Used.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"hard": basetypes.ObjectType{
			AttrTypes: HardValue{}.AttributeTypes(ctx),
		},
		"limits": basetypes.ObjectType{
			AttrTypes: LimitsValue{}.AttributeTypes(ctx),
		},
		"used": basetypes.ObjectType{
			AttrTypes: UsedValue{}.AttributeTypes(ctx),
		},
		"uuid": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"hard":   hard,
			"limits": limits,
			"used":   used,
			"uuid":   v.Uuid,
		})

	return objVal, diags
}

func (v QuotasValue) Equal(o attr.Value) bool {
	other, ok := o.(QuotasValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Hard.Equal(other.Hard) {
		return false
	}

	if !v.Limits.Equal(other.Limits) {
		return false
	}

	if !v.Used.Equal(other.Used) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v QuotasValue) Type(ctx context.Context) attr.Type {
	return QuotasType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v QuotasValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"hard": basetypes.ObjectType{
			AttrTypes: HardValue{}.AttributeTypes(ctx),
		},
		"limits": basetypes.ObjectType{
			AttrTypes: LimitsValue{}.AttributeTypes(ctx),
		},
		"used": basetypes.ObjectType{
			AttrTypes: UsedValue{}.AttributeTypes(ctx),
		},
		"uuid": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = HardType{}

type HardType struct {
	basetypes.ObjectType
}

func (t HardType) Equal(o attr.Type) bool {
	other, ok := o.(HardType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HardType) String() string {
	return "HardType"
}

func (t HardType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	instancesAttribute, ok := attributes["instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instances is missing from object`)

		return nil, diags
	}

	instancesVal, ok := instancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instances expected to be basetypes.Int64Value, was: %T`, instancesAttribute))
	}

	liveInstancesAttribute, ok := attributes["live_instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_instances is missing from object`)

		return nil, diags
	}

	liveInstancesVal, ok := liveInstancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_instances expected to be basetypes.Int64Value, was: %T`, liveInstancesAttribute))
	}

	liveMemoryMbAttribute, ok := attributes["live_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_memory_mb is missing from object`)

		return nil, diags
	}

	liveMemoryMbVal, ok := liveMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_memory_mb expected to be basetypes.Int64Value, was: %T`, liveMemoryMbAttribute))
	}

	serviceGroupsAttribute, ok := attributes["service_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_groups is missing from object`)

		return nil, diags
	}

	serviceGroupsVal, ok := serviceGroupsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_groups expected to be basetypes.Int64Value, was: %T`, serviceGroupsAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return nil, diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.Int64Value, was: %T`, servicesAttribute))
	}

	totalVolumeMbAttribute, ok := attributes["total_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_volume_mb is missing from object`)

		return nil, diags
	}

	totalVolumeMbVal, ok := totalVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_volume_mb expected to be basetypes.Int64Value, was: %T`, totalVolumeMbAttribute))
	}

	volumesAttribute, ok := attributes["volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volumes is missing from object`)

		return nil, diags
	}

	volumesVal, ok := volumesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volumes expected to be basetypes.Int64Value, was: %T`, volumesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HardValue{
		Instances:     instancesVal,
		LiveInstances: liveInstancesVal,
		LiveMemoryMb:  liveMemoryMbVal,
		ServiceGroups: serviceGroupsVal,
		Services:      servicesVal,
		TotalVolumeMb: totalVolumeMbVal,
		Volumes:       volumesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewHardValueNull() HardValue {
	return HardValue{
		state: attr.ValueStateNull,
	}
}

func NewHardValueUnknown() HardValue {
	return HardValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHardValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HardValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HardValue Attribute Value",
				"While creating a HardValue value, a missing attribute value was detected. "+
					"A HardValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HardValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HardValue Attribute Type",
				"While creating a HardValue value, an invalid attribute value was detected. "+
					"A HardValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HardValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HardValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HardValue Attribute Value",
				"While creating a HardValue value, an extra attribute value was detected. "+
					"A HardValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HardValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHardValueUnknown(), diags
	}

	instancesAttribute, ok := attributes["instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instances is missing from object`)

		return NewHardValueUnknown(), diags
	}

	instancesVal, ok := instancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instances expected to be basetypes.Int64Value, was: %T`, instancesAttribute))
	}

	liveInstancesAttribute, ok := attributes["live_instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_instances is missing from object`)

		return NewHardValueUnknown(), diags
	}

	liveInstancesVal, ok := liveInstancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_instances expected to be basetypes.Int64Value, was: %T`, liveInstancesAttribute))
	}

	liveMemoryMbAttribute, ok := attributes["live_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_memory_mb is missing from object`)

		return NewHardValueUnknown(), diags
	}

	liveMemoryMbVal, ok := liveMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_memory_mb expected to be basetypes.Int64Value, was: %T`, liveMemoryMbAttribute))
	}

	serviceGroupsAttribute, ok := attributes["service_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_groups is missing from object`)

		return NewHardValueUnknown(), diags
	}

	serviceGroupsVal, ok := serviceGroupsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_groups expected to be basetypes.Int64Value, was: %T`, serviceGroupsAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return NewHardValueUnknown(), diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.Int64Value, was: %T`, servicesAttribute))
	}

	totalVolumeMbAttribute, ok := attributes["total_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_volume_mb is missing from object`)

		return NewHardValueUnknown(), diags
	}

	totalVolumeMbVal, ok := totalVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_volume_mb expected to be basetypes.Int64Value, was: %T`, totalVolumeMbAttribute))
	}

	volumesAttribute, ok := attributes["volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volumes is missing from object`)

		return NewHardValueUnknown(), diags
	}

	volumesVal, ok := volumesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volumes expected to be basetypes.Int64Value, was: %T`, volumesAttribute))
	}

	if diags.HasError() {
		return NewHardValueUnknown(), diags
	}

	return HardValue{
		Instances:     instancesVal,
		LiveInstances: liveInstancesVal,
		LiveMemoryMb:  liveMemoryMbVal,
		ServiceGroups: serviceGroupsVal,
		Services:      servicesVal,
		TotalVolumeMb: totalVolumeMbVal,
		Volumes:       volumesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewHardValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HardValue {
	object, diags := NewHardValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHardValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HardType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHardValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHardValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHardValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHardValueMust(HardValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HardType) ValueType(ctx context.Context) attr.Value {
	return HardValue{}
}

var _ basetypes.ObjectValuable = HardValue{}

type HardValue struct {
	Instances     basetypes.Int64Value `tfsdk:"instances"`
	LiveInstances basetypes.Int64Value `tfsdk:"live_instances"`
	LiveMemoryMb  basetypes.Int64Value `tfsdk:"live_memory_mb"`
	ServiceGroups basetypes.Int64Value `tfsdk:"service_groups"`
	Services      basetypes.Int64Value `tfsdk:"services"`
	TotalVolumeMb basetypes.Int64Value `tfsdk:"total_volume_mb"`
	Volumes       basetypes.Int64Value `tfsdk:"volumes"`
	state         attr.ValueState
}

func (v HardValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["instances"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["live_instances"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["live_memory_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["service_groups"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["services"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["total_volume_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["volumes"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Instances.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instances"] = val

		val, err = v.LiveInstances.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["live_instances"] = val

		val, err = v.LiveMemoryMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["live_memory_mb"] = val

		val, err = v.ServiceGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_groups"] = val

		val, err = v.Services.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["services"] = val

		val, err = v.TotalVolumeMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total_volume_mb"] = val

		val, err = v.Volumes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volumes"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HardValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HardValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HardValue) String() string {
	return "HardValue"
}

func (v HardValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"instances":       basetypes.Int64Type{},
		"live_instances":  basetypes.Int64Type{},
		"live_memory_mb":  basetypes.Int64Type{},
		"service_groups":  basetypes.Int64Type{},
		"services":        basetypes.Int64Type{},
		"total_volume_mb": basetypes.Int64Type{},
		"volumes":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"instances":       v.Instances,
			"live_instances":  v.LiveInstances,
			"live_memory_mb":  v.LiveMemoryMb,
			"service_groups":  v.ServiceGroups,
			"services":        v.Services,
			"total_volume_mb": v.TotalVolumeMb,
			"volumes":         v.Volumes,
		})

	return objVal, diags
}

func (v HardValue) Equal(o attr.Value) bool {
	other, ok := o.(HardValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Instances.Equal(other.Instances) {
		return false
	}

	if !v.LiveInstances.Equal(other.LiveInstances) {
		return false
	}

	if !v.LiveMemoryMb.Equal(other.LiveMemoryMb) {
		return false
	}

	if !v.ServiceGroups.Equal(other.ServiceGroups) {
		return false
	}

	if !v.Services.Equal(other.Services) {
		return false
	}

	if !v.TotalVolumeMb.Equal(other.TotalVolumeMb) {
		return false
	}

	if !v.Volumes.Equal(other.Volumes) {
		return false
	}

	return true
}

func (v HardValue) Type(ctx context.Context) attr.Type {
	return HardType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HardValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"instances":       basetypes.Int64Type{},
		"live_instances":  basetypes.Int64Type{},
		"live_memory_mb":  basetypes.Int64Type{},
		"service_groups":  basetypes.Int64Type{},
		"services":        basetypes.Int64Type{},
		"total_volume_mb": basetypes.Int64Type{},
		"volumes":         basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = LimitsType{}

type LimitsType struct {
	basetypes.ObjectType
}

func (t LimitsType) Equal(o attr.Type) bool {
	other, ok := o.(LimitsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LimitsType) String() string {
	return "LimitsType"
}

func (t LimitsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	maxAutoscaleSizeAttribute, ok := attributes["max_autoscale_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_autoscale_size is missing from object`)

		return nil, diags
	}

	maxAutoscaleSizeVal, ok := maxAutoscaleSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_autoscale_size expected to be basetypes.Int64Value, was: %T`, maxAutoscaleSizeAttribute))
	}

	maxMemoryMbAttribute, ok := attributes["max_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_memory_mb is missing from object`)

		return nil, diags
	}

	maxMemoryMbVal, ok := maxMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_memory_mb expected to be basetypes.Int64Value, was: %T`, maxMemoryMbAttribute))
	}

	maxVolumeMbAttribute, ok := attributes["max_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_volume_mb is missing from object`)

		return nil, diags
	}

	maxVolumeMbVal, ok := maxVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_volume_mb expected to be basetypes.Int64Value, was: %T`, maxVolumeMbAttribute))
	}

	minAutoscaleSizeAttribute, ok := attributes["min_autoscale_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_autoscale_size is missing from object`)

		return nil, diags
	}

	minAutoscaleSizeVal, ok := minAutoscaleSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_autoscale_size expected to be basetypes.Int64Value, was: %T`, minAutoscaleSizeAttribute))
	}

	minMemoryMbAttribute, ok := attributes["min_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_memory_mb is missing from object`)

		return nil, diags
	}

	minMemoryMbVal, ok := minMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_memory_mb expected to be basetypes.Int64Value, was: %T`, minMemoryMbAttribute))
	}

	minVolumeMbAttribute, ok := attributes["min_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_volume_mb is missing from object`)

		return nil, diags
	}

	minVolumeMbVal, ok := minVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_volume_mb expected to be basetypes.Int64Value, was: %T`, minVolumeMbAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LimitsValue{
		MaxAutoscaleSize: maxAutoscaleSizeVal,
		MaxMemoryMb:      maxMemoryMbVal,
		MaxVolumeMb:      maxVolumeMbVal,
		MinAutoscaleSize: minAutoscaleSizeVal,
		MinMemoryMb:      minMemoryMbVal,
		MinVolumeMb:      minVolumeMbVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewLimitsValueNull() LimitsValue {
	return LimitsValue{
		state: attr.ValueStateNull,
	}
}

func NewLimitsValueUnknown() LimitsValue {
	return LimitsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLimitsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LimitsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LimitsValue Attribute Value",
				"While creating a LimitsValue value, a missing attribute value was detected. "+
					"A LimitsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LimitsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LimitsValue Attribute Type",
				"While creating a LimitsValue value, an invalid attribute value was detected. "+
					"A LimitsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LimitsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LimitsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LimitsValue Attribute Value",
				"While creating a LimitsValue value, an extra attribute value was detected. "+
					"A LimitsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LimitsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLimitsValueUnknown(), diags
	}

	maxAutoscaleSizeAttribute, ok := attributes["max_autoscale_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_autoscale_size is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	maxAutoscaleSizeVal, ok := maxAutoscaleSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_autoscale_size expected to be basetypes.Int64Value, was: %T`, maxAutoscaleSizeAttribute))
	}

	maxMemoryMbAttribute, ok := attributes["max_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_memory_mb is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	maxMemoryMbVal, ok := maxMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_memory_mb expected to be basetypes.Int64Value, was: %T`, maxMemoryMbAttribute))
	}

	maxVolumeMbAttribute, ok := attributes["max_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_volume_mb is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	maxVolumeMbVal, ok := maxVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_volume_mb expected to be basetypes.Int64Value, was: %T`, maxVolumeMbAttribute))
	}

	minAutoscaleSizeAttribute, ok := attributes["min_autoscale_size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_autoscale_size is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	minAutoscaleSizeVal, ok := minAutoscaleSizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_autoscale_size expected to be basetypes.Int64Value, was: %T`, minAutoscaleSizeAttribute))
	}

	minMemoryMbAttribute, ok := attributes["min_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_memory_mb is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	minMemoryMbVal, ok := minMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_memory_mb expected to be basetypes.Int64Value, was: %T`, minMemoryMbAttribute))
	}

	minVolumeMbAttribute, ok := attributes["min_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_volume_mb is missing from object`)

		return NewLimitsValueUnknown(), diags
	}

	minVolumeMbVal, ok := minVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_volume_mb expected to be basetypes.Int64Value, was: %T`, minVolumeMbAttribute))
	}

	if diags.HasError() {
		return NewLimitsValueUnknown(), diags
	}

	return LimitsValue{
		MaxAutoscaleSize: maxAutoscaleSizeVal,
		MaxMemoryMb:      maxMemoryMbVal,
		MaxVolumeMb:      maxVolumeMbVal,
		MinAutoscaleSize: minAutoscaleSizeVal,
		MinMemoryMb:      minMemoryMbVal,
		MinVolumeMb:      minVolumeMbVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewLimitsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LimitsValue {
	object, diags := NewLimitsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLimitsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LimitsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLimitsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLimitsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLimitsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLimitsValueMust(LimitsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LimitsType) ValueType(ctx context.Context) attr.Value {
	return LimitsValue{}
}

var _ basetypes.ObjectValuable = LimitsValue{}

type LimitsValue struct {
	MaxAutoscaleSize basetypes.Int64Value `tfsdk:"max_autoscale_size"`
	MaxMemoryMb      basetypes.Int64Value `tfsdk:"max_memory_mb"`
	MaxVolumeMb      basetypes.Int64Value `tfsdk:"max_volume_mb"`
	MinAutoscaleSize basetypes.Int64Value `tfsdk:"min_autoscale_size"`
	MinMemoryMb      basetypes.Int64Value `tfsdk:"min_memory_mb"`
	MinVolumeMb      basetypes.Int64Value `tfsdk:"min_volume_mb"`
	state            attr.ValueState
}

func (v LimitsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["max_autoscale_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_memory_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_volume_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["min_autoscale_size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["min_memory_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["min_volume_mb"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.MaxAutoscaleSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_autoscale_size"] = val

		val, err = v.MaxMemoryMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_memory_mb"] = val

		val, err = v.MaxVolumeMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_volume_mb"] = val

		val, err = v.MinAutoscaleSize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_autoscale_size"] = val

		val, err = v.MinMemoryMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_memory_mb"] = val

		val, err = v.MinVolumeMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_volume_mb"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LimitsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LimitsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LimitsValue) String() string {
	return "LimitsValue"
}

func (v LimitsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"max_autoscale_size": basetypes.Int64Type{},
		"max_memory_mb":      basetypes.Int64Type{},
		"max_volume_mb":      basetypes.Int64Type{},
		"min_autoscale_size": basetypes.Int64Type{},
		"min_memory_mb":      basetypes.Int64Type{},
		"min_volume_mb":      basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"max_autoscale_size": v.MaxAutoscaleSize,
			"max_memory_mb":      v.MaxMemoryMb,
			"max_volume_mb":      v.MaxVolumeMb,
			"min_autoscale_size": v.MinAutoscaleSize,
			"min_memory_mb":      v.MinMemoryMb,
			"min_volume_mb":      v.MinVolumeMb,
		})

	return objVal, diags
}

func (v LimitsValue) Equal(o attr.Value) bool {
	other, ok := o.(LimitsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MaxAutoscaleSize.Equal(other.MaxAutoscaleSize) {
		return false
	}

	if !v.MaxMemoryMb.Equal(other.MaxMemoryMb) {
		return false
	}

	if !v.MaxVolumeMb.Equal(other.MaxVolumeMb) {
		return false
	}

	if !v.MinAutoscaleSize.Equal(other.MinAutoscaleSize) {
		return false
	}

	if !v.MinMemoryMb.Equal(other.MinMemoryMb) {
		return false
	}

	if !v.MinVolumeMb.Equal(other.MinVolumeMb) {
		return false
	}

	return true
}

func (v LimitsValue) Type(ctx context.Context) attr.Type {
	return LimitsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LimitsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"max_autoscale_size": basetypes.Int64Type{},
		"max_memory_mb":      basetypes.Int64Type{},
		"max_volume_mb":      basetypes.Int64Type{},
		"min_autoscale_size": basetypes.Int64Type{},
		"min_memory_mb":      basetypes.Int64Type{},
		"min_volume_mb":      basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = UsedType{}

type UsedType struct {
	basetypes.ObjectType
}

func (t UsedType) Equal(o attr.Type) bool {
	other, ok := o.(UsedType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UsedType) String() string {
	return "UsedType"
}

func (t UsedType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	instancesAttribute, ok := attributes["instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instances is missing from object`)

		return nil, diags
	}

	instancesVal, ok := instancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instances expected to be basetypes.Int64Value, was: %T`, instancesAttribute))
	}

	liveInstancesAttribute, ok := attributes["live_instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_instances is missing from object`)

		return nil, diags
	}

	liveInstancesVal, ok := liveInstancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_instances expected to be basetypes.Int64Value, was: %T`, liveInstancesAttribute))
	}

	liveMemoryMbAttribute, ok := attributes["live_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_memory_mb is missing from object`)

		return nil, diags
	}

	liveMemoryMbVal, ok := liveMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_memory_mb expected to be basetypes.Int64Value, was: %T`, liveMemoryMbAttribute))
	}

	serviceGroupsAttribute, ok := attributes["service_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_groups is missing from object`)

		return nil, diags
	}

	serviceGroupsVal, ok := serviceGroupsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_groups expected to be basetypes.Int64Value, was: %T`, serviceGroupsAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return nil, diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.Int64Value, was: %T`, servicesAttribute))
	}

	totalVolumeMbAttribute, ok := attributes["total_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_volume_mb is missing from object`)

		return nil, diags
	}

	totalVolumeMbVal, ok := totalVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_volume_mb expected to be basetypes.Int64Value, was: %T`, totalVolumeMbAttribute))
	}

	volumesAttribute, ok := attributes["volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volumes is missing from object`)

		return nil, diags
	}

	volumesVal, ok := volumesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volumes expected to be basetypes.Int64Value, was: %T`, volumesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UsedValue{
		Instances:     instancesVal,
		LiveInstances: liveInstancesVal,
		LiveMemoryMb:  liveMemoryMbVal,
		ServiceGroups: serviceGroupsVal,
		Services:      servicesVal,
		TotalVolumeMb: totalVolumeMbVal,
		Volumes:       volumesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewUsedValueNull() UsedValue {
	return UsedValue{
		state: attr.ValueStateNull,
	}
}

func NewUsedValueUnknown() UsedValue {
	return UsedValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUsedValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UsedValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UsedValue Attribute Value",
				"While creating a UsedValue value, a missing attribute value was detected. "+
					"A UsedValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsedValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UsedValue Attribute Type",
				"While creating a UsedValue value, an invalid attribute value was detected. "+
					"A UsedValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsedValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UsedValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UsedValue Attribute Value",
				"While creating a UsedValue value, an extra attribute value was detected. "+
					"A UsedValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UsedValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUsedValueUnknown(), diags
	}

	instancesAttribute, ok := attributes["instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instances is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	instancesVal, ok := instancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instances expected to be basetypes.Int64Value, was: %T`, instancesAttribute))
	}

	liveInstancesAttribute, ok := attributes["live_instances"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_instances is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	liveInstancesVal, ok := liveInstancesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_instances expected to be basetypes.Int64Value, was: %T`, liveInstancesAttribute))
	}

	liveMemoryMbAttribute, ok := attributes["live_memory_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`live_memory_mb is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	liveMemoryMbVal, ok := liveMemoryMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`live_memory_mb expected to be basetypes.Int64Value, was: %T`, liveMemoryMbAttribute))
	}

	serviceGroupsAttribute, ok := attributes["service_groups"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_groups is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	serviceGroupsVal, ok := serviceGroupsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_groups expected to be basetypes.Int64Value, was: %T`, serviceGroupsAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.Int64Value, was: %T`, servicesAttribute))
	}

	totalVolumeMbAttribute, ok := attributes["total_volume_mb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total_volume_mb is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	totalVolumeMbVal, ok := totalVolumeMbAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total_volume_mb expected to be basetypes.Int64Value, was: %T`, totalVolumeMbAttribute))
	}

	volumesAttribute, ok := attributes["volumes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`volumes is missing from object`)

		return NewUsedValueUnknown(), diags
	}

	volumesVal, ok := volumesAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`volumes expected to be basetypes.Int64Value, was: %T`, volumesAttribute))
	}

	if diags.HasError() {
		return NewUsedValueUnknown(), diags
	}

	return UsedValue{
		Instances:     instancesVal,
		LiveInstances: liveInstancesVal,
		LiveMemoryMb:  liveMemoryMbVal,
		ServiceGroups: serviceGroupsVal,
		Services:      servicesVal,
		TotalVolumeMb: totalVolumeMbVal,
		Volumes:       volumesVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewUsedValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UsedValue {
	object, diags := NewUsedValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUsedValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UsedType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUsedValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUsedValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUsedValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUsedValueMust(UsedValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UsedType) ValueType(ctx context.Context) attr.Value {
	return UsedValue{}
}

var _ basetypes.ObjectValuable = UsedValue{}

type UsedValue struct {
	Instances     basetypes.Int64Value `tfsdk:"instances"`
	LiveInstances basetypes.Int64Value `tfsdk:"live_instances"`
	LiveMemoryMb  basetypes.Int64Value `tfsdk:"live_memory_mb"`
	ServiceGroups basetypes.Int64Value `tfsdk:"service_groups"`
	Services      basetypes.Int64Value `tfsdk:"services"`
	TotalVolumeMb basetypes.Int64Value `tfsdk:"total_volume_mb"`
	Volumes       basetypes.Int64Value `tfsdk:"volumes"`
	state         attr.ValueState
}

func (v UsedValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["instances"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["live_instances"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["live_memory_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["service_groups"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["services"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["total_volume_mb"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["volumes"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Instances.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instances"] = val

		val, err = v.LiveInstances.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["live_instances"] = val

		val, err = v.LiveMemoryMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["live_memory_mb"] = val

		val, err = v.ServiceGroups.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_groups"] = val

		val, err = v.Services.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["services"] = val

		val, err = v.TotalVolumeMb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total_volume_mb"] = val

		val, err = v.Volumes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["volumes"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UsedValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UsedValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UsedValue) String() string {
	return "UsedValue"
}

func (v UsedValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"instances":       basetypes.Int64Type{},
		"live_instances":  basetypes.Int64Type{},
		"live_memory_mb":  basetypes.Int64Type{},
		"service_groups":  basetypes.Int64Type{},
		"services":        basetypes.Int64Type{},
		"total_volume_mb": basetypes.Int64Type{},
		"volumes":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"instances":       v.Instances,
			"live_instances":  v.LiveInstances,
			"live_memory_mb":  v.LiveMemoryMb,
			"service_groups":  v.ServiceGroups,
			"services":        v.Services,
			"total_volume_mb": v.TotalVolumeMb,
			"volumes":         v.Volumes,
		})

	return objVal, diags
}

func (v UsedValue) Equal(o attr.Value) bool {
	other, ok := o.(UsedValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Instances.Equal(other.Instances) {
		return false
	}

	if !v.LiveInstances.Equal(other.LiveInstances) {
		return false
	}

	if !v.LiveMemoryMb.Equal(other.LiveMemoryMb) {
		return false
	}

	if !v.ServiceGroups.Equal(other.ServiceGroups) {
		return false
	}

	if !v.Services.Equal(other.Services) {
		return false
	}

	if !v.TotalVolumeMb.Equal(other.TotalVolumeMb) {
		return false
	}

	if !v.Volumes.Equal(other.Volumes) {
		return false
	}

	return true
}

func (v UsedValue) Type(ctx context.Context) attr.Type {
	return UsedType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UsedValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"instances":       basetypes.Int64Type{},
		"live_instances":  basetypes.Int64Type{},
		"live_memory_mb":  basetypes.Int64Type{},
		"service_groups":  basetypes.Int64Type{},
		"services":        basetypes.Int64Type{},
		"total_volume_mb": basetypes.Int64Type{},
		"volumes":         basetypes.Int64Type{},
	}
}
